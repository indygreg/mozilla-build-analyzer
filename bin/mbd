# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

from __future__ import print_function, unicode_literals

import argparse
import calendar
import datetime
import numpy
import operator
import sys
import time

from mozbuilddata.buildbotdata import (
    DataLoader as BuildbotDataLoader,
    available_build_files,
)
from mozbuilddata.cassandra import connect
from mozbuilddata.logparser.jobparser import parse_build_log


class CLI(object):
    def __init__(self, connection):
        self.connection = connection

    def build_files_synchronize(self):
        loader = BuildbotDataLoader(self.connection)
        for msg in loader.synchronize_build_files():
            print(msg)

    def build_metadata_load(self, day_count=None, days=None):
        times = []

        if day_count and days:
            raise Exception('Can only specify 1 of day count or days.')

        if day_count:
            now = time.time()
            # We don't do today because we likely don't have data yet.
            for i in range(1, day_count + 1):
                times.append(now - i * 86400)
        elif days:
            for day in days:
                t = time.strptime(day, '%Y-%m-%d')
                times.append(calendar.timegm(t))

        if not times:
            times.append(time.time())

        loader = BuildbotDataLoader(self.connection)
        for t in times:
            print(time.strftime('Loading data for %Y-%m-%d', time.gmtime(t)))
            for msg in loader.load_builds_from_day(t):
                print(msg)

    def build_metadata_truncate(self):
        self.connection.truncate_build_metadata()

    def build_data_drop(self):
        self.connection.drop_build_tables()

    def builder_names(self):
        builders = self.connection.builders()

        for name in sorted(set(t[1] for t in builders)):
            print(name)

    def builder_categories(self):
        builders = self.connection.builders()

        for category in sorted(set(t[2] for t in builders)):
            print(category)

    def builders_in_category(self, category, print_name=False):
        ids = self.connection.builder_ids_in_category(category)

        for builder_id in sorted(ids):
            if print_name:
                print(self.connection.get_builder(builder_id)['name'])
            else:
                print(builder_id)

    def builder_times_statistics(self, category=None, statistic=None):
        builders = self.connection.builders()

        if category:
            builders = [t for t in builders if t[2] == category]

        for builder in sorted(set(t[1] for t in builders)):
            times = []
            for build_id, duration in \
                self.connection.build_durations_with_builder_name(builder):

                times.append(duration)

            if not len(times):
                continue

            times = numpy.array(times)
            reverse = False

            if statistic == 'count':
                value = len(times)
            elif statistic == 'histogram':
                counts, bins = numpy.histogram(times, bins=15)
                values = []
                for i, count in enumerate(counts):
                    values.append('%d,%d' % (counts[i], bins[i]))
                value = '\t'.join(values)
                reverse = True
            elif statistic == 'mean':
                value = numpy.mean(times)
            elif statistic == 'median':
                value = numpy.median(times)
            elif statistic == 'stddev':
                value = numpy.std(times)
            elif statistic == 'sum':
                value = numpy.sum(times)
            elif statistic == 'variance':
                value = numpy.var(times)
            else:
                raise Exception('Unknown statistic: %s' % statistic)

            if reverse:
                print('%s\t%s' % (builder, value))
            else:
                print('%s\t%s' % (value, builder))

    def build_times(self, category=None, builder=None):
        if category and builder:
            print('Cannot specify both --category and explicit builders.')
            return 1

        print_builder = False
        build_ids = set()

        if category:
            print_builder = True
            build_ids = set(self.connection.build_ids_in_category(category))
        else:
            for builder_name in builder:
                build_ids |= \
                    set(self.connection.build_ids_with_builder_name(builder_name))

        for build_id in sorted(build_ids):
            info = self.connection.build_from_id(build_id)
            if not info:
                continue

            print(build_id, '\t', end='')

            elapsed_seconds = (int(info['endtime']) - int(info['starttime']))
            elapsed = datetime.timedelta(seconds=elapsed_seconds)
            print(elapsed_seconds, '\t', elapsed, '\t', end='')

            if print_builder:
                print(info['builder_name'], '\t', end='')

            print('')

    def build_steps(self, build_id):
        for bid in build_id:
            log = self.connection.build_log(bid)
            if not log:
                continue

            parsed = parse_build_log(log)
            for step in parsed.steps:
                print('%s %s %s %s' % (
                    step.start.isoformat(), step.end.isoformat(),
                    step.end - step.start,
                    step.name))

    def builds_in_category(self, category):
        for build_id in sorted(self.connection.build_ids_in_category(category)):
            print(build_id)

    def builds_for_builder(self, builder_name):
        builder_ids = self.connection.build_ids_with_builder_name(builder_name)
        for build_id in sorted(builder_ids):
            print(build_id)

    def build_counts_by_builder(self):
        counts = dict(self.connection.get_counts('builder_number'))
        for builder in sorted(counts):
            print('%d\t%s' % (counts[builder], builder))

    def build_logs_synchronize(self, **kwargs):
        loader = BuildbotDataLoader(self.connection)
        for msg in loader.load_missing_logs(**kwargs):
            print(msg)

    def log_cat(self, build_id):
        for bid in build_id:
            print(self.connection.build_log(bid))

    def log_load(self, build_id):
        loader = BuildbotDataLoader(self.connection)
        for msg in loader.parse_logs(build_id):
            print(msg)

    def log_data_truncate(self):
        self.connection.truncate_log_metadata()

    def slave_names(self):
        names = set(t[1] for t in self.connection.slaves())
        print('\n'.join(sorted(names)))

    def slave_builds(self, slavename=None, print_id=False):
        slave_id = self.connection.slave_id_from_name(slavename)
        if not slave_id:
            print('Could not find slave: %s' % slavename)
            return 1

        build_ids = self.connection.build_ids_on_slave(slave_id)
        for build_id in sorted(build_ids):
            if print_id:
                print(build_id)
                continue

            info = self.connection.build_from_id(build_id)

            print(build_id)
            for prop in sorted(info):
                print('\t%s\t%s' % (prop, info[prop]))

    def slave_efficiencies(self):
        slaves = sorted((t[1], t[0]) for t in self.connection.slaves())

        print('slave\ttotal time (s)\tused time (s)\tunused time (s)\t'
            'efficiency')

        for slave_name, slave_id in slaves:
            times = []

            build_ids = self.connection.build_ids_on_slave(slave_id)
            for build_id in sorted(build_ids):
                info = self.connection.build_from_id(build_id)
                if not info:
                    continue

                times.append((int(info['starttime']), int(info['endtime'])))

            if not times:
                continue

            times = sorted(times, key=operator.itemgetter(0))

            earliest = times[0][0]
            latest = times[-1][1]
            total = latest - earliest
            used = 0
            unused = 0

            last = earliest
            for start, end in times:
                unused = start - last
                used += end - start
                last = end

            efficiency = float(used) / total * 100

            print('%s\t%d\t%d\t%d\t%.1f' % (slave_name, total, used, unused,
                efficiency))

    def file_sizes(self):
        for filename in self.connection.filenames():
            info = self.connection.file_metadata(filename)

            print('%s\t%d\t%d' % (filename, info['original_size'],
                info['stored_size']))

    def json_export(self, path):
        from mozbuilddata.exporter import JSONExporter

        exporter = JSONExporter(self.connection, path)
        for msg in exporter.export():
            print(msg)


def main():
    parser = argparse.ArgumentParser(
        description='Do stuff with Mozilla build data.')

    parser.add_argument('--host', default='localhost',
        help='Cassandra host to connect to.')

    parser.add_argument('--port', default=9160, type=int,
        help='Cassandra port to connect to.')

    parser.add_argument('--keyspace', default='mozbuilddata',
        help='Cassandra keyspace to use for storage.')

    subparsers = parser.add_subparsers()

    build_files_synchronize = subparsers.add_parser('build-files-synchronize',
        help='Synchronize our copy of the raw build files from server data.')
    build_files_synchronize.set_defaults(func='build_files_synchronize')

    build_metadata_load = subparsers.add_parser('build-metadata-load',
        help='Load information about buildbot builds into storage.')
    build_metadata_load.add_argument('--day', nargs='*', dest='days',
        help='Day to load. Specified as a YYYY-MM-DD value.')
    build_metadata_load.add_argument('--day-count', type=int,
        help='Number of previous days of data to import.')
    build_metadata_load.set_defaults(func='build_metadata_load')

    build_metadata_truncate = subparsers.add_parser('build-metadata-truncate',
        help='Truncate all build metadata (WARNING DELETES LOTS OF DATA)')
    build_metadata_truncate.set_defaults(func='build_metadata_truncate')

    build_data_drop = subparsers.add_parser('build-data-drop',
        help='Drop tables holding build data.')
    build_data_drop.set_defaults(func='build_data_drop')

    builder_names = subparsers.add_parser('builder-names',
        help='Print the names of all builders.')
    builder_names.set_defaults(func='builder_names')

    builder_categories = subparsers.add_parser('builder-categories',
        help='Print all the builder categories.')
    builder_categories.set_defaults(func='builder_categories')

    builders_in_category = subparsers.add_parser('builders-in-category',
        help='Print all the builders in a specific category.')
    builders_in_category.set_defaults(func='builders_in_category')
    builders_in_category.add_argument('category',
        help='The category to filter on.')
    builders_in_category.add_argument('--print-name', action='store_true',
        help='Whether to print the name of the builder instead of the ID.')

    builder_statistics = subparsers.add_parser('builder-times-statistics',
        help='Print statistics for builder times.')
    builder_statistics.set_defaults(func='builder_times_statistics')
    builder_statistics.add_argument('--statistic', choices=['count',
        'histogram', 'median', 'mean', 'stddev', 'sum', 'variance'],
        help='Which statistic to print')
    builder_statistics.add_argument('--category',
        help='Limit output to builders in this category.')

    build_times = subparsers.add_parser('build-times',
        help='Print times it took builds to run.')
    build_times.set_defaults(func='build_times')
    build_times.add_argument('--category',
        help='Only include builders in this category.')
    build_times.add_argument('builder', nargs='*',
        help='Name of builder to query. Overrides other arguments.')

    build_steps = subparsers.add_parser('build-steps',
        help='Print info on all steps performed during a build.')
    build_steps.set_defaults(func='build_steps')
    build_steps.add_argument('build_id', nargs='+',
        help='ID of the build to analyze.')

    builds_in_category = subparsers.add_parser('builds-in-category',
        help='List all the builds belonging to a specified category.')
    builds_in_category.set_defaults(func='builds_in_category')
    builds_in_category.add_argument('category', help='Category to filter on.')

    builds_for_builder = subparsers.add_parser('builds-for-builder',
        help='List all builds belonging to a specified builder.')
    builds_for_builder.set_defaults(func='builds_for_builder')
    builds_for_builder.add_argument('builder_name',
        help='Name of the builder to show builds for.')

    build_counts_by_builder = subparsers.add_parser('build-counts-by-builder',
        help='List counts of builds grouped by builder name.')
    build_counts_by_builder.set_defaults(func='build_counts_by_builder')

    build_logs_synchronize = subparsers.add_parser('build-logs-synchronize',
        help='Import raw build logs into storage.')
    build_logs_synchronize.set_defaults(func='build_logs_synchronize')
    build_logs_synchronize.add_argument('--builder-pattern',
        help='Only load logs for builders matching this pattern. The pattern '
            'is a UNIX shell glob style pattern match, performed without '
            'regard to character case.')
    build_logs_synchronize.add_argument('--category',
        help='Only consider builds in this category.')
    build_logs_synchronize.add_argument('--after',
        help='Only load logs from builds after this date (YYYY-MM-DD).')

    log_cat = subparsers.add_parser('log-cat', help='Print a raw build log.')
    log_cat.set_defaults(func='log_cat')
    log_cat.add_argument('build_id', nargs='+',
        help='The ID of the build whose log to print.')

    log_load = subparsers.add_parser('log-load',
        help='Parse logs and load derived data into storage.')
    log_load.set_defaults(func='log_load')
    log_load.add_argument('build_id', nargs='*',
        help='Build IDs whose logs to parse and load.')

    log_data_truncate = subparsers.add_parser('log-data-truncate',
        help='Truncate data derived from parsing logs. WARNING THIS DELETES '
            'DATA!')
    log_data_truncate.set_defaults(func='log_data_truncate')

    slave_names = subparsers.add_parser('slave-names',
        help='Print the names of all slaves.')
    slave_names.set_defaults(func='slave_names')

    sj = subparsers.add_parser('slave-builds',
        help='Obtain information about builds that ran on a particular slave.')
    sj.add_argument('--print-id', help='Just print the build ID.',
        action='store_true')
    sj.add_argument('slavename',
        help='The name of the slave whose info to view.')
    sj.set_defaults(func='slave_builds')

    slave_efficiencies = subparsers.add_parser('slave-efficiencies',
        help='Obtain information about the efficiency of all slaves.')
    slave_efficiencies.set_defaults(func='slave_efficiencies')

    file_sizes = subparsers.add_parser('file-sizes',
        help='Print all files and their sizes.')
    file_sizes.set_defaults(func='file_sizes')

    json_export = subparsers.add_parser('json-export',
        help='Export data to JSON.')
    json_export.set_defaults(func='json_export')
    json_export.add_argument('path', help='Directory to write files to.')

    args = parser.parse_args()

    connection = connect(args.host, args.port, args.keyspace)

    global_arguments = ['host', 'port', 'keyspace', 'func']
    relevant = {k: getattr(args, k) for k in vars(args) if k not in
        global_arguments}

    cli = CLI(connection)
    try:
        getattr(cli, args.func)(**relevant)
    except KeyboardInterrupt:
        sys.exit(1)


if __name__ == '__main__':
    main()
